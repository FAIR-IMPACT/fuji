"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CoreMetadataOutput:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "core_metadata_status": "str",
        "core_metadata_found": "OutputCoreMetadataFound",
        "core_metadata_source": "list[str]",
    }

    attribute_map = {
        "core_metadata_status": "core_metadata_status",
        "core_metadata_found": "core_metadata_found",
        "core_metadata_source": "core_metadata_source",
    }

    def __init__(self, core_metadata_status=None, core_metadata_found=None, core_metadata_source=None):
        """CoreMetadataOutput - a model defined in Swagger"""
        self._core_metadata_status = None
        self._core_metadata_found = None
        self._core_metadata_source = None
        self.discriminator = None
        if core_metadata_status is not None:
            self.core_metadata_status = core_metadata_status
        if core_metadata_found is not None:
            self.core_metadata_found = core_metadata_found
        if core_metadata_source is not None:
            self.core_metadata_source = core_metadata_source

    @property
    def core_metadata_status(self):
        """Gets the core_metadata_status of this CoreMetadataOutput.  # noqa: E501


        :return: The core_metadata_status of this CoreMetadataOutput.  # noqa: E501
        :rtype: str
        """
        return self._core_metadata_status

    @core_metadata_status.setter
    def core_metadata_status(self, core_metadata_status):
        """Sets the core_metadata_status of this CoreMetadataOutput.


        :param core_metadata_status: The core_metadata_status of this CoreMetadataOutput.  # noqa: E501
        :type: str
        """
        allowed_values = ["insufficent metadata", "partial metadata", "all metadata"]
        if core_metadata_status not in allowed_values:
            raise ValueError(
                f"Invalid value for `core_metadata_status` ({core_metadata_status}), must be one of {allowed_values}"
            )

        self._core_metadata_status = core_metadata_status

    @property
    def core_metadata_found(self):
        """Gets the core_metadata_found of this CoreMetadataOutput.  # noqa: E501


        :return: The core_metadata_found of this CoreMetadataOutput.  # noqa: E501
        :rtype: OutputCoreMetadataFound
        """
        return self._core_metadata_found

    @core_metadata_found.setter
    def core_metadata_found(self, core_metadata_found):
        """Sets the core_metadata_found of this CoreMetadataOutput.


        :param core_metadata_found: The core_metadata_found of this CoreMetadataOutput.  # noqa: E501
        :type: OutputCoreMetadataFound
        """

        self._core_metadata_found = core_metadata_found

    @property
    def core_metadata_source(self):
        """Gets the core_metadata_source of this CoreMetadataOutput.  # noqa: E501


        :return: The core_metadata_source of this CoreMetadataOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._core_metadata_source

    @core_metadata_source.setter
    def core_metadata_source(self, core_metadata_source):
        """Sets the core_metadata_source of this CoreMetadataOutput.


        :param core_metadata_source: The core_metadata_source of this CoreMetadataOutput.  # noqa: E501
        :type: list[str]
        """

        self._core_metadata_source = core_metadata_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CoreMetadataOutput, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoreMetadataOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
