# SPDX-FileCopyrightText: 2020 PANGAEA (https://www.pangaea.de/)
#
# SPDX-License-Identifier: MIT

from datetime import date

from fuji_server import util
from fuji_server.models.base_model_ import Model


class Metric(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        metric_identifier: str | None = None,
        metric_name: str | None = None,
        description: str | None = None,
        fair_principle: str | None = None,
        evaluation_mechanism: str | None = None,
        date_created: date | None = None,
        date_updated: date | None = None,
        created_by: str | None = None,
        version: float | None = None,
        total_score: int | None = None,
    ):
        """Metric - a model defined in Swagger

        :param metric_identifier: The metric_identifier of this Metric.  # noqa: E501
        :type metric_identifier: str
        :param metric_name: The metric_name of this Metric.  # noqa: E501
        :type metric_name: str
        :param description: The description of this Metric.  # noqa: E501
        :type description: str
        :param fair_principle: The fair_principle of this Metric.  # noqa: E501
        :type fair_principle: str
        :param evaluation_mechanism: The evaluation_mechanism of this Metric.  # noqa: E501
        :type evaluation_mechanism: str
        :param date_created: The date_created of this Metric.  # noqa: E501
        :type date_created: date
        :param date_updated: The date_updated of this Metric.  # noqa: E501
        :type date_updated: date
        :param created_by: The created_by of this Metric.  # noqa: E501
        :type created_by: str
        :param version: The version of this Metric.  # noqa: E501
        :type version: float
        :param total_score: The total_score of this Metric.  # noqa: E501
        :type total_score: int
        """
        self.swagger_types = {
            "metric_identifier": str,
            "metric_name": str,
            "description": str,
            "fair_principle": str,
            "evaluation_mechanism": str,
            "date_created": date,
            "date_updated": date,
            "created_by": str,
            "version": float,
            "total_score": int,
        }

        self.attribute_map = {
            "metric_identifier": "metric_identifier",
            "metric_name": "metric_name",
            "description": "description",
            "fair_principle": "fair_principle",
            "evaluation_mechanism": "evaluation_mechanism",
            "date_created": "date_created",
            "date_updated": "date_updated",
            "created_by": "created_by",
            "version": "version",
            "total_score": "total_score",
        }
        self._metric_identifier = metric_identifier
        self._metric_name = metric_name
        self._description = description
        self._fair_principle = fair_principle
        self._evaluation_mechanism = evaluation_mechanism
        self._date_created = date_created
        self._date_updated = date_updated
        self._created_by = created_by
        self._version = version
        self._total_score = total_score

    @classmethod
    def from_dict(cls, dikt) -> "Metric":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Metric of this Metric.  # noqa: E501
        :rtype: Metric
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metric_identifier(self) -> str:
        """Gets the metric_identifier of this Metric.


        :return: The metric_identifier of this Metric.
        :rtype: str
        """
        return self._metric_identifier

    @metric_identifier.setter
    def metric_identifier(self, metric_identifier: str):
        """Sets the metric_identifier of this Metric.


        :param metric_identifier: The metric_identifier of this Metric.
        :type metric_identifier: str
        """

        self._metric_identifier = metric_identifier

    @property
    def metric_name(self) -> str:
        """Gets the metric_name of this Metric.


        :return: The metric_name of this Metric.
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name: str):
        """Sets the metric_name of this Metric.


        :param metric_name: The metric_name of this Metric.
        :type metric_name: str
        """

        self._metric_name = metric_name

    @property
    def description(self) -> str:
        """Gets the description of this Metric.


        :return: The description of this Metric.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Metric.


        :param description: The description of this Metric.
        :type description: str
        """

        self._description = description

    @property
    def fair_principle(self) -> str:
        """Gets the fair_principle of this Metric.


        :return: The fair_principle of this Metric.
        :rtype: str
        """
        return self._fair_principle

    @fair_principle.setter
    def fair_principle(self, fair_principle: str):
        """Sets the fair_principle of this Metric.


        :param fair_principle: The fair_principle of this Metric.
        :type fair_principle: str
        """

        self._fair_principle = fair_principle

    @property
    def evaluation_mechanism(self) -> str:
        """Gets the evaluation_mechanism of this Metric.


        :return: The evaluation_mechanism of this Metric.
        :rtype: str
        """
        return self._evaluation_mechanism

    @evaluation_mechanism.setter
    def evaluation_mechanism(self, evaluation_mechanism: str):
        """Sets the evaluation_mechanism of this Metric.


        :param evaluation_mechanism: The evaluation_mechanism of this Metric.
        :type evaluation_mechanism: str
        """

        self._evaluation_mechanism = evaluation_mechanism

    @property
    def date_created(self) -> date:
        """Gets the date_created of this Metric.


        :return: The date_created of this Metric.
        :rtype: date
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: date):
        """Sets the date_created of this Metric.


        :param date_created: The date_created of this Metric.
        :type date_created: date
        """

        self._date_created = date_created

    @property
    def date_updated(self) -> date:
        """Gets the date_updated of this Metric.


        :return: The date_updated of this Metric.
        :rtype: date
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated: date):
        """Sets the date_updated of this Metric.


        :param date_updated: The date_updated of this Metric.
        :type date_updated: date
        """

        self._date_updated = date_updated

    @property
    def created_by(self) -> str:
        """Gets the created_by of this Metric.


        :return: The created_by of this Metric.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: str):
        """Sets the created_by of this Metric.


        :param created_by: The created_by of this Metric.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def version(self) -> float:
        """Gets the version of this Metric.


        :return: The version of this Metric.
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version: float):
        """Sets the version of this Metric.


        :param version: The version of this Metric.
        :type version: float
        """

        self._version = version

    @property
    def total_score(self) -> int:
        """Gets the total_score of this Metric.


        :return: The total_score of this Metric.
        :rtype: int
        """
        return self._total_score

    @total_score.setter
    def total_score(self, total_score: int):
        """Sets the total_score of this Metric.


        :param total_score: The total_score of this Metric.
        :type total_score: int
        """

        self._total_score = total_score
