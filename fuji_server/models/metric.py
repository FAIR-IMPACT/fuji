"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Metric:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "metric_identifier": "str",
        "metric_name": "str",
        "description": "str",
        "fair_principle": "str",
        "evaluation_mechanism": "str",
        "date_created": "date",
        "date_updated": "date",
        "created_by": "str",
        "version": "float",
        "total_score": "int",
    }

    attribute_map = {
        "metric_identifier": "metric_identifier",
        "metric_name": "metric_name",
        "description": "description",
        "fair_principle": "fair_principle",
        "evaluation_mechanism": "evaluation_mechanism",
        "date_created": "date_created",
        "date_updated": "date_updated",
        "created_by": "created_by",
        "version": "version",
        "total_score": "total_score",
    }

    def __init__(
        self,
        metric_identifier=None,
        metric_name=None,
        description=None,
        fair_principle=None,
        evaluation_mechanism=None,
        date_created=None,
        date_updated=None,
        created_by=None,
        version=None,
        total_score=None,
    ):
        """Metric - a model defined in Swagger"""
        self._metric_identifier = None
        self._metric_name = None
        self._description = None
        self._fair_principle = None
        self._evaluation_mechanism = None
        self._date_created = None
        self._date_updated = None
        self._created_by = None
        self._version = None
        self._total_score = None
        self.discriminator = None
        if metric_identifier is not None:
            self.metric_identifier = metric_identifier
        if metric_name is not None:
            self.metric_name = metric_name
        if description is not None:
            self.description = description
        if fair_principle is not None:
            self.fair_principle = fair_principle
        if evaluation_mechanism is not None:
            self.evaluation_mechanism = evaluation_mechanism
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if created_by is not None:
            self.created_by = created_by
        if version is not None:
            self.version = version
        if total_score is not None:
            self.total_score = total_score

    @property
    def metric_identifier(self):
        """Gets the metric_identifier of this Metric.  # noqa: E501


        :return: The metric_identifier of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._metric_identifier

    @metric_identifier.setter
    def metric_identifier(self, metric_identifier):
        """Sets the metric_identifier of this Metric.


        :param metric_identifier: The metric_identifier of this Metric.  # noqa: E501
        :type: str
        """

        self._metric_identifier = metric_identifier

    @property
    def metric_name(self):
        """Gets the metric_name of this Metric.  # noqa: E501


        :return: The metric_name of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this Metric.


        :param metric_name: The metric_name of this Metric.  # noqa: E501
        :type: str
        """

        self._metric_name = metric_name

    @property
    def description(self):
        """Gets the description of this Metric.  # noqa: E501


        :return: The description of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Metric.


        :param description: The description of this Metric.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fair_principle(self):
        """Gets the fair_principle of this Metric.  # noqa: E501


        :return: The fair_principle of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._fair_principle

    @fair_principle.setter
    def fair_principle(self, fair_principle):
        """Sets the fair_principle of this Metric.


        :param fair_principle: The fair_principle of this Metric.  # noqa: E501
        :type: str
        """

        self._fair_principle = fair_principle

    @property
    def evaluation_mechanism(self):
        """Gets the evaluation_mechanism of this Metric.  # noqa: E501


        :return: The evaluation_mechanism of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._evaluation_mechanism

    @evaluation_mechanism.setter
    def evaluation_mechanism(self, evaluation_mechanism):
        """Sets the evaluation_mechanism of this Metric.


        :param evaluation_mechanism: The evaluation_mechanism of this Metric.  # noqa: E501
        :type: str
        """

        self._evaluation_mechanism = evaluation_mechanism

    @property
    def date_created(self):
        """Gets the date_created of this Metric.  # noqa: E501


        :return: The date_created of this Metric.  # noqa: E501
        :rtype: date
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this Metric.


        :param date_created: The date_created of this Metric.  # noqa: E501
        :type: date
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this Metric.  # noqa: E501


        :return: The date_updated of this Metric.  # noqa: E501
        :rtype: date
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this Metric.


        :param date_updated: The date_updated of this Metric.  # noqa: E501
        :type: date
        """

        self._date_updated = date_updated

    @property
    def created_by(self):
        """Gets the created_by of this Metric.  # noqa: E501


        :return: The created_by of this Metric.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Metric.


        :param created_by: The created_by of this Metric.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def version(self):
        """Gets the version of this Metric.  # noqa: E501


        :return: The version of this Metric.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Metric.


        :param version: The version of this Metric.  # noqa: E501
        :type: float
        """

        self._version = version

    @property
    def total_score(self):
        """Gets the total_score of this Metric.  # noqa: E501


        :return: The total_score of this Metric.  # noqa: E501
        :rtype: int
        """
        return self._total_score

    @total_score.setter
    def total_score(self, total_score):
        """Sets the total_score of this Metric.


        :param total_score: The total_score of this Metric.  # noqa: E501
        :type: int
        """

        self._total_score = total_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(Metric, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metric):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
