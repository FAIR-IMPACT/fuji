"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FAIRResultEvaluationCriterium:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "metric_test_name": "str",
        "metric_test_requirements": "list[dict(str, object)]",
        "metric_test_score": "FAIRResultCommonScore",
        "metric_test_maturity": "int",
        "metric_test_status": "str",
    }

    attribute_map = {
        "metric_test_name": "metric_test_name",
        "metric_test_requirements": "metric_test_requirements",
        "metric_test_score": "metric_test_score",
        "metric_test_maturity": "metric_test_maturity",
        "metric_test_status": "metric_test_status",
    }

    def __init__(
        self,
        metric_test_name=None,
        metric_test_requirements=None,
        metric_test_score=None,
        metric_test_maturity=None,
        metric_test_status="fail",
    ):
        """FAIRResultEvaluationCriterium - a model defined in Swagger"""
        self._metric_test_name = None
        self._metric_test_requirements = None
        self._metric_test_score = None
        self._metric_test_maturity = None
        self._metric_test_status = None
        self.discriminator = None
        if metric_test_name is not None:
            self.metric_test_name = metric_test_name
        if metric_test_requirements is not None:
            self.metric_test_requirements = metric_test_requirements
        if metric_test_score is not None:
            self.metric_test_score = metric_test_score
        if metric_test_maturity is not None:
            self.metric_test_maturity = metric_test_maturity
        if metric_test_status is not None:
            self.metric_test_status = metric_test_status

    @property
    def metric_test_name(self):
        """Gets the metric_test_name of this FAIRResultEvaluationCriterium.  # noqa: E501


        :return: The metric_test_name of this FAIRResultEvaluationCriterium.  # noqa: E501
        :rtype: str
        """
        return self._metric_test_name

    @metric_test_name.setter
    def metric_test_name(self, metric_test_name):
        """Sets the metric_test_name of this FAIRResultEvaluationCriterium.


        :param metric_test_name: The metric_test_name of this FAIRResultEvaluationCriterium.  # noqa: E501
        :type: str
        """

        self._metric_test_name = metric_test_name

    @property
    def metric_test_requirements(self):
        """Gets the metric_test_requirements of this FAIRResultEvaluationCriterium.  # noqa: E501


        :return: The metric_test_requirements of this FAIRResultEvaluationCriterium.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._metric_test_requirements

    @metric_test_requirements.setter
    def metric_test_requirements(self, metric_test_requirements):
        """Sets the metric_test_requirements of this FAIRResultEvaluationCriterium.


        :param metric_test_requirements: The metric_test_requirements of this FAIRResultEvaluationCriterium.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._metric_test_requirements = metric_test_requirements

    @property
    def metric_test_score(self):
        """Gets the metric_test_score of this FAIRResultEvaluationCriterium.  # noqa: E501


        :return: The metric_test_score of this FAIRResultEvaluationCriterium.  # noqa: E501
        :rtype: FAIRResultCommonScore
        """
        return self._metric_test_score

    @metric_test_score.setter
    def metric_test_score(self, metric_test_score):
        """Sets the metric_test_score of this FAIRResultEvaluationCriterium.


        :param metric_test_score: The metric_test_score of this FAIRResultEvaluationCriterium.  # noqa: E501
        :type: FAIRResultCommonScore
        """

        self._metric_test_score = metric_test_score

    @property
    def metric_test_maturity(self):
        """Gets the metric_test_maturity of this FAIRResultEvaluationCriterium.  # noqa: E501


        :return: The metric_test_maturity of this FAIRResultEvaluationCriterium.  # noqa: E501
        :rtype: int
        """
        return self._metric_test_maturity

    @metric_test_maturity.setter
    def metric_test_maturity(self, metric_test_maturity):
        """Sets the metric_test_maturity of this FAIRResultEvaluationCriterium.


        :param metric_test_maturity: The metric_test_maturity of this FAIRResultEvaluationCriterium.  # noqa: E501
        :type: int
        """

        self._metric_test_maturity = metric_test_maturity

    @property
    def metric_test_status(self):
        """Gets the metric_test_status of this FAIRResultEvaluationCriterium.  # noqa: E501


        :return: The metric_test_status of this FAIRResultEvaluationCriterium.  # noqa: E501
        :rtype: str
        """
        return self._metric_test_status

    @metric_test_status.setter
    def metric_test_status(self, metric_test_status):
        """Sets the metric_test_status of this FAIRResultEvaluationCriterium.


        :param metric_test_status: The metric_test_status of this FAIRResultEvaluationCriterium.  # noqa: E501
        :type: str
        """
        allowed_values = ["pass", "fail"]
        if metric_test_status not in allowed_values:
            raise ValueError(
                f"Invalid value for `metric_test_status` ({metric_test_status}), must be one of {allowed_values}"
            )

        self._metric_test_status = metric_test_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(FAIRResultEvaluationCriterium, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FAIRResultEvaluationCriterium):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
