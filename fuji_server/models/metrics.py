from fuji_server import util
from fuji_server.models.base_model_ import Model
from fuji_server.models.metric import Metric  # noqa: F401,E501


class Metrics(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, total: int = None, metrics: list[Metric] = None):  # noqa: E501
        """Metrics - a model defined in Swagger

        :param total: The total of this Metrics.  # noqa: E501
        :type total: int
        :param metrics: The metrics of this Metrics.  # noqa: E501
        :type metrics: List[Metric]
        """
        self.swagger_types = {"total": int, "metrics": list[Metric]}

        self.attribute_map = {"total": "total", "metrics": "metrics"}
        self._total = total
        self._metrics = metrics

    @classmethod
    def from_dict(cls, dikt) -> "Metrics":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Metrics of this Metrics.  # noqa: E501
        :rtype: Metrics
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self) -> int:
        """Gets the total of this Metrics.


        :return: The total of this Metrics.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this Metrics.


        :param total: The total of this Metrics.
        :type total: int
        """

        self._total = total

    @property
    def metrics(self) -> list[Metric]:
        """Gets the metrics of this Metrics.


        :return: The metrics of this Metrics.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: list[Metric]):
        """Sets the metrics of this Metrics.


        :param metrics: The metrics of this Metrics.
        :type metrics: List[Metric]
        """

        self._metrics = metrics
