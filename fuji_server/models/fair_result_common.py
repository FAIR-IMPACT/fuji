"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FAIRResultCommon:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "int",
        "metric_identifier": "str",
        "metric_name": "str",
        "metric_tests": "dict(str, FAIRResultEvaluationCriterium)",
        "test_status": "str",
        "score": "FAIRResultCommonScore",
        "maturity": "int",
    }

    attribute_map = {
        "id": "id",
        "metric_identifier": "metric_identifier",
        "metric_name": "metric_name",
        "metric_tests": "metric_tests",
        "test_status": "test_status",
        "score": "score",
        "maturity": "maturity",
    }

    def __init__(
        self,
        id=None,
        metric_identifier=None,
        metric_name=None,
        metric_tests=None,
        test_status="fail",
        score=None,
        maturity=0,
    ):
        """FAIRResultCommon - a model defined in Swagger"""
        self._id = None
        self._metric_identifier = None
        self._metric_name = None
        self._metric_tests = None
        self._test_status = None
        self._score = None
        self._maturity = None
        self.discriminator = None
        self.id = id
        self.metric_identifier = metric_identifier
        self.metric_name = metric_name
        if metric_tests is not None:
            self.metric_tests = metric_tests
        self.test_status = test_status
        self.score = score
        if maturity is not None:
            self.maturity = maturity

    @property
    def id(self):
        """Gets the id of this FAIRResultCommon.  # noqa: E501


        :return: The id of this FAIRResultCommon.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FAIRResultCommon.


        :param id: The id of this FAIRResultCommon.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def metric_identifier(self):
        """Gets the metric_identifier of this FAIRResultCommon.  # noqa: E501


        :return: The metric_identifier of this FAIRResultCommon.  # noqa: E501
        :rtype: str
        """
        return self._metric_identifier

    @metric_identifier.setter
    def metric_identifier(self, metric_identifier):
        """Sets the metric_identifier of this FAIRResultCommon.


        :param metric_identifier: The metric_identifier of this FAIRResultCommon.  # noqa: E501
        :type: str
        """
        if metric_identifier is None:
            raise ValueError("Invalid value for `metric_identifier`, must not be `None`")

        self._metric_identifier = metric_identifier

    @property
    def metric_name(self):
        """Gets the metric_name of this FAIRResultCommon.  # noqa: E501


        :return: The metric_name of this FAIRResultCommon.  # noqa: E501
        :rtype: str
        """
        return self._metric_name

    @metric_name.setter
    def metric_name(self, metric_name):
        """Sets the metric_name of this FAIRResultCommon.


        :param metric_name: The metric_name of this FAIRResultCommon.  # noqa: E501
        :type: str
        """
        if metric_name is None:
            raise ValueError("Invalid value for `metric_name`, must not be `None`")

        self._metric_name = metric_name

    @property
    def metric_tests(self):
        """Gets the metric_tests of this FAIRResultCommon.  # noqa: E501


        :return: The metric_tests of this FAIRResultCommon.  # noqa: E501
        :rtype: dict(str, FAIRResultEvaluationCriterium)
        """
        return self._metric_tests

    @metric_tests.setter
    def metric_tests(self, metric_tests):
        """Sets the metric_tests of this FAIRResultCommon.


        :param metric_tests: The metric_tests of this FAIRResultCommon.  # noqa: E501
        :type: dict(str, FAIRResultEvaluationCriterium)
        """

        self._metric_tests = metric_tests

    @property
    def test_status(self):
        """Gets the test_status of this FAIRResultCommon.  # noqa: E501


        :return: The test_status of this FAIRResultCommon.  # noqa: E501
        :rtype: str
        """
        return self._test_status

    @test_status.setter
    def test_status(self, test_status):
        """Sets the test_status of this FAIRResultCommon.


        :param test_status: The test_status of this FAIRResultCommon.  # noqa: E501
        :type: str
        """
        if test_status is None:
            raise ValueError("Invalid value for `test_status`, must not be `None`")
        allowed_values = ["pass", "fail", "indeterminate"]
        if test_status not in allowed_values:
            raise ValueError(f"Invalid value for `test_status` ({test_status}), must be one of {allowed_values}")

        self._test_status = test_status

    @property
    def score(self):
        """Gets the score of this FAIRResultCommon.  # noqa: E501


        :return: The score of this FAIRResultCommon.  # noqa: E501
        :rtype: FAIRResultCommonScore
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this FAIRResultCommon.


        :param score: The score of this FAIRResultCommon.  # noqa: E501
        :type: FAIRResultCommonScore
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")

        self._score = score

    @property
    def maturity(self):
        """Gets the maturity of this FAIRResultCommon.  # noqa: E501


        :return: The maturity of this FAIRResultCommon.  # noqa: E501
        :rtype: int
        """
        return self._maturity

    @maturity.setter
    def maturity(self, maturity):
        """Sets the maturity of this FAIRResultCommon.


        :param maturity: The maturity of this FAIRResultCommon.  # noqa: E501
        :type: int
        """

        self._maturity = maturity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(FAIRResultCommon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FAIRResultCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
