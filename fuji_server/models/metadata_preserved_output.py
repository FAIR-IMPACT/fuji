# -*- coding: utf-8 -*-

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fuji_server.models.base_model_ import Model
from fuji_server import util


class MetadataPreservedOutput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, metadata_preservation_method: List[str] = None):  # noqa: E501
        """MetadataPreservedOutput - a model defined in Swagger

        :param metadata_preservation_method: The metadata_preservation_method of this MetadataPreservedOutput.  # noqa: E501
        :type metadata_preservation_method: List[str]
        """
        self.swagger_types = {'metadata_preservation_method': List[str]}

        self.attribute_map = {'metadata_preservation_method': 'metadata_preservation_method'}
        self._metadata_preservation_method = metadata_preservation_method

    @classmethod
    def from_dict(cls, dikt) -> 'MetadataPreservedOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetadataPreserved_output of this MetadataPreservedOutput.  # noqa: E501
        :rtype: MetadataPreservedOutput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata_preservation_method(self) -> List[str]:
        """Gets the metadata_preservation_method of this MetadataPreservedOutput.


        :return: The metadata_preservation_method of this MetadataPreservedOutput.
        :rtype: List[str]
        """
        return self._metadata_preservation_method

    @metadata_preservation_method.setter
    def metadata_preservation_method(self, metadata_preservation_method: List[str]):
        """Sets the metadata_preservation_method of this MetadataPreservedOutput.


        :param metadata_preservation_method: The metadata_preservation_method of this MetadataPreservedOutput.
        :type metadata_preservation_method: List[str]
        """
        allowed_values = ['datacite', 'tombstone']  # noqa: E501
        if not set(metadata_preservation_method).issubset(set(allowed_values)):
            raise ValueError(
                'Invalid values for `metadata_preservation_method` [{0}], must be a subset of [{1}]'  # noqa: E501
                .format(
                    ', '.join(map(str,
                                  set(metadata_preservation_method) - set(allowed_values))),  # noqa: E501
                    ', '.join(map(str, allowed_values))))

        self._metadata_preservation_method = metadata_preservation_method
