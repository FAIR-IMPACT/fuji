from fuji_server import util
from fuji_server.models.base_model_ import Model


class DataAccessOutput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, access_level: str | None = None, access_details: object = None):
        """DataAccessOutput - a model defined in Swagger

        :param access_level: The access_level of this DataAccessOutput.  # noqa: E501
        :type access_level: str
        :param access_details: The access_details of this DataAccessOutput.  # noqa: E501
        :type access_details: object
        """
        self.swagger_types = {"access_level": str, "access_details": object}

        self.attribute_map = {"access_level": "access_level", "access_details": "access_details"}
        self._access_level = access_level
        self._access_details = access_details

    @classmethod
    def from_dict(cls, dikt) -> "DataAccessOutput":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataAccess_output of this DataAccessOutput.  # noqa: E501
        :rtype: DataAccessOutput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_level(self) -> str:
        """Gets the access_level of this DataAccessOutput.


        :return: The access_level of this DataAccessOutput.
        :rtype: str
        """
        return self._access_level

    @access_level.setter
    def access_level(self, access_level: str):
        """Sets the access_level of this DataAccessOutput.


        :param access_level: The access_level of this DataAccessOutput.
        :type access_level: str
        """
        allowed_values = ["public", "embargoed", "restricted", "closed", "metadataonly"]
        if access_level not in allowed_values:
            raise ValueError(f"Invalid value for `access_level` ({access_level}), must be one of {allowed_values}")

        self._access_level = access_level

    @property
    def access_details(self) -> object:
        """Gets the access_details of this DataAccessOutput.


        :return: The access_details of this DataAccessOutput.
        :rtype: object
        """
        return self._access_details

    @access_details.setter
    def access_details(self, access_details: object):
        """Sets the access_details of this DataAccessOutput.


        :param access_details: The access_details of this DataAccessOutput.
        :type access_details: object
        """

        self._access_details = access_details
