"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PersistenceOutputInner:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"pid": "str", "pid_scheme": "str", "resolvable_status": "bool", "resolved_url": "str"}

    attribute_map = {
        "pid": "pid",
        "pid_scheme": "pid_scheme",
        "resolvable_status": "resolvable_status",
        "resolved_url": "resolved_url",
    }

    def __init__(self, pid=None, pid_scheme=None, resolvable_status=False, resolved_url=None):
        """PersistenceOutputInner - a model defined in Swagger"""
        self._pid = None
        self._pid_scheme = None
        self._resolvable_status = None
        self._resolved_url = None
        self.discriminator = None
        if pid is not None:
            self.pid = pid
        if pid_scheme is not None:
            self.pid_scheme = pid_scheme
        if resolvable_status is not None:
            self.resolvable_status = resolvable_status
        if resolved_url is not None:
            self.resolved_url = resolved_url

    @property
    def pid(self):
        """Gets the pid of this PersistenceOutputInner.  # noqa: E501


        :return: The pid of this PersistenceOutputInner.  # noqa: E501
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this PersistenceOutputInner.


        :param pid: The pid of this PersistenceOutputInner.  # noqa: E501
        :type: str
        """

        self._pid = pid

    @property
    def pid_scheme(self):
        """Gets the pid_scheme of this PersistenceOutputInner.  # noqa: E501


        :return: The pid_scheme of this PersistenceOutputInner.  # noqa: E501
        :rtype: str
        """
        return self._pid_scheme

    @pid_scheme.setter
    def pid_scheme(self, pid_scheme):
        """Sets the pid_scheme of this PersistenceOutputInner.


        :param pid_scheme: The pid_scheme of this PersistenceOutputInner.  # noqa: E501
        :type: str
        """

        self._pid_scheme = pid_scheme

    @property
    def resolvable_status(self):
        """Gets the resolvable_status of this PersistenceOutputInner.  # noqa: E501


        :return: The resolvable_status of this PersistenceOutputInner.  # noqa: E501
        :rtype: bool
        """
        return self._resolvable_status

    @resolvable_status.setter
    def resolvable_status(self, resolvable_status):
        """Sets the resolvable_status of this PersistenceOutputInner.


        :param resolvable_status: The resolvable_status of this PersistenceOutputInner.  # noqa: E501
        :type: bool
        """

        self._resolvable_status = resolvable_status

    @property
    def resolved_url(self):
        """Gets the resolved_url of this PersistenceOutputInner.  # noqa: E501


        :return: The resolved_url of this PersistenceOutputInner.  # noqa: E501
        :rtype: str
        """
        return self._resolved_url

    @resolved_url.setter
    def resolved_url(self, resolved_url):
        """Sets the resolved_url of this PersistenceOutputInner.


        :param resolved_url: The resolved_url of this PersistenceOutputInner.  # noqa: E501
        :type: str
        """

        self._resolved_url = resolved_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(PersistenceOutputInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PersistenceOutputInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
