"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class HarvestResultsMetadata:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "method": "str",
        "url": "str",
        "format": "str",
        "schema": "str",
        "namespaces": "list[str]",
        "metadata": "dict(str, object)",
    }

    attribute_map = {
        "method": "method",
        "url": "url",
        "format": "format",
        "schema": "schema",
        "namespaces": "namespaces",
        "metadata": "metadata",
    }

    def __init__(self, method=None, url=None, format=None, schema=None, namespaces=None, metadata=None):
        """HarvestResultsMetadata - a model defined in Swagger"""
        self._method = None
        self._url = None
        self._format = None
        self._schema = None
        self._namespaces = None
        self._metadata = None
        self.discriminator = None
        if method is not None:
            self.method = method
        if url is not None:
            self.url = url
        if format is not None:
            self.format = format
        if schema is not None:
            self.schema = schema
        if namespaces is not None:
            self.namespaces = namespaces
        if metadata is not None:
            self.metadata = metadata

    @property
    def method(self):
        """Gets the method of this HarvestResultsMetadata.  # noqa: E501


        :return: The method of this HarvestResultsMetadata.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this HarvestResultsMetadata.


        :param method: The method of this HarvestResultsMetadata.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def url(self):
        """Gets the url of this HarvestResultsMetadata.  # noqa: E501


        :return: The url of this HarvestResultsMetadata.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this HarvestResultsMetadata.


        :param url: The url of this HarvestResultsMetadata.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def format(self):
        """Gets the format of this HarvestResultsMetadata.  # noqa: E501


        :return: The format of this HarvestResultsMetadata.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this HarvestResultsMetadata.


        :param format: The format of this HarvestResultsMetadata.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def schema(self):
        """Gets the schema of this HarvestResultsMetadata.  # noqa: E501


        :return: The schema of this HarvestResultsMetadata.  # noqa: E501
        :rtype: str
        """
        return self._schema

    @schema.setter
    def schema(self, schema):
        """Sets the schema of this HarvestResultsMetadata.


        :param schema: The schema of this HarvestResultsMetadata.  # noqa: E501
        :type: str
        """

        self._schema = schema

    @property
    def namespaces(self):
        """Gets the namespaces of this HarvestResultsMetadata.  # noqa: E501


        :return: The namespaces of this HarvestResultsMetadata.  # noqa: E501
        :rtype: list[str]
        """
        return self._namespaces

    @namespaces.setter
    def namespaces(self, namespaces):
        """Sets the namespaces of this HarvestResultsMetadata.


        :param namespaces: The namespaces of this HarvestResultsMetadata.  # noqa: E501
        :type: list[str]
        """

        self._namespaces = namespaces

    @property
    def metadata(self):
        """Gets the metadata of this HarvestResultsMetadata.  # noqa: E501


        :return: The metadata of this HarvestResultsMetadata.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this HarvestResultsMetadata.


        :param metadata: The metadata of this HarvestResultsMetadata.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(HarvestResultsMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HarvestResultsMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
