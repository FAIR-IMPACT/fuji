"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CommunityEndorsedStandardOutputInner:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "metadata_standard": "str",
        "url": "str",
        "subject_areas": "list[str]",
        "type": "str",
        "source": "str",
    }

    attribute_map = {
        "metadata_standard": "metadata_standard",
        "url": "url",
        "subject_areas": "subject_areas",
        "type": "type",
        "source": "source",
    }

    def __init__(self, metadata_standard=None, url=None, subject_areas=None, type=None, source=None):
        """CommunityEndorsedStandardOutputInner - a model defined in Swagger"""
        self._metadata_standard = None
        self._url = None
        self._subject_areas = None
        self._type = None
        self._source = None
        self.discriminator = None
        if metadata_standard is not None:
            self.metadata_standard = metadata_standard
        if url is not None:
            self.url = url
        if subject_areas is not None:
            self.subject_areas = subject_areas
        if type is not None:
            self.type = type
        if source is not None:
            self.source = source

    @property
    def metadata_standard(self):
        """Gets the metadata_standard of this CommunityEndorsedStandardOutputInner.  # noqa: E501


        :return: The metadata_standard of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :rtype: str
        """
        return self._metadata_standard

    @metadata_standard.setter
    def metadata_standard(self, metadata_standard):
        """Sets the metadata_standard of this CommunityEndorsedStandardOutputInner.


        :param metadata_standard: The metadata_standard of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :type: str
        """

        self._metadata_standard = metadata_standard

    @property
    def url(self):
        """Gets the url of this CommunityEndorsedStandardOutputInner.  # noqa: E501


        :return: The url of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CommunityEndorsedStandardOutputInner.


        :param url: The url of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def subject_areas(self):
        """Gets the subject_areas of this CommunityEndorsedStandardOutputInner.  # noqa: E501


        :return: The subject_areas of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_areas

    @subject_areas.setter
    def subject_areas(self, subject_areas):
        """Sets the subject_areas of this CommunityEndorsedStandardOutputInner.


        :param subject_areas: The subject_areas of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :type: list[str]
        """

        self._subject_areas = subject_areas

    @property
    def type(self):
        """Gets the type of this CommunityEndorsedStandardOutputInner.  # noqa: E501


        :return: The type of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommunityEndorsedStandardOutputInner.


        :param type: The type of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def source(self):
        """Gets the source of this CommunityEndorsedStandardOutputInner.  # noqa: E501


        :return: The source of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CommunityEndorsedStandardOutputInner.


        :param source: The source of this CommunityEndorsedStandardOutputInner.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CommunityEndorsedStandardOutputInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommunityEndorsedStandardOutputInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
