# SPDX-FileCopyrightText: 2020 PANGAEA (https://www.pangaea.de/)
#
# SPDX-License-Identifier: MIT

# coding: utf-8

from datetime import date, datetime  # noqa: F401

from fuji_server import util
from fuji_server.models.base_model_ import Model


class FormalMetadataOutputInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self, serialization_format: str | None = None, source: str | None = None, is_metadata_found: bool = False
    ):
        """FormalMetadataOutputInner - a model defined in Swagger

        :param serialization_format: The serialization_format of this FormalMetadataOutputInner.  # noqa: E501
        :type serialization_format: str
        :param source: The source of this FormalMetadataOutputInner.  # noqa: E501
        :type source: str
        :param is_metadata_found: The is_metadata_found of this FormalMetadataOutputInner.  # noqa: E501
        :type is_metadata_found: bool
        """
        self.swagger_types = {"serialization_format": str, "source": str, "is_metadata_found": bool}

        self.attribute_map = {
            "serialization_format": "serialization_format",
            "source": "source",
            "is_metadata_found": "is_metadata_found",
        }
        self._serialization_format = serialization_format
        self._source = source
        self._is_metadata_found = is_metadata_found

    @classmethod
    def from_dict(cls, dikt) -> "FormalMetadataOutputInner":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FormalMetadata_output_inner of this FormalMetadataOutputInner.  # noqa: E501
        :rtype: FormalMetadataOutputInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def serialization_format(self) -> str:
        """Gets the serialization_format of this FormalMetadataOutputInner.


        :return: The serialization_format of this FormalMetadataOutputInner.
        :rtype: str
        """
        return self._serialization_format

    @serialization_format.setter
    def serialization_format(self, serialization_format: str):
        """Sets the serialization_format of this FormalMetadataOutputInner.


        :param serialization_format: The serialization_format of this FormalMetadataOutputInner.
        :type serialization_format: str
        """

        self._serialization_format = serialization_format

    @property
    def source(self) -> str:
        """Gets the source of this FormalMetadataOutputInner.


        :return: The source of this FormalMetadataOutputInner.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this FormalMetadataOutputInner.


        :param source: The source of this FormalMetadataOutputInner.
        :type source: str
        """
        allowed_values = ["typed_link", "content_negotiate", "structured_data", "sparql_endpoint"]
        if source not in allowed_values:
            raise ValueError(f"Invalid value for `source` ({source}), must be one of {allowed_values}")

        self._source = source

    @property
    def is_metadata_found(self) -> bool:
        """Gets the is_metadata_found of this FormalMetadataOutputInner.


        :return: The is_metadata_found of this FormalMetadataOutputInner.
        :rtype: bool
        """
        return self._is_metadata_found

    @is_metadata_found.setter
    def is_metadata_found(self, is_metadata_found: bool):
        """Sets the is_metadata_found of this FormalMetadataOutputInner.


        :param is_metadata_found: The is_metadata_found of this FormalMetadataOutputInner.
        :type is_metadata_found: bool
        """

        self._is_metadata_found = is_metadata_found
