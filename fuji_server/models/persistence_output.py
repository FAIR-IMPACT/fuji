# -*- coding: utf-8 -*-

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from fuji_server.models.base_model_ import Model
from fuji_server import util


class PersistenceOutput(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self,
                 pid: str = None,
                 pid_scheme: str = None,
                 resolvable_status: bool = False,
                 resolved_url: str = None):  # noqa: E501
        """PersistenceOutput - a model defined in Swagger

        :param pid: The pid of this PersistenceOutput.  # noqa: E501
        :type pid: str
        :param pid_scheme: The pid_scheme of this PersistenceOutput.  # noqa: E501
        :type pid_scheme: str
        :param resolvable_status: The resolvable_status of this PersistenceOutput.  # noqa: E501
        :type resolvable_status: bool
        :param resolved_url: The resolved_url of this PersistenceOutput.  # noqa: E501
        :type resolved_url: str
        """
        self.swagger_types = {'pid': str, 'pid_scheme': str, 'resolvable_status': bool, 'resolved_url': str}

        self.attribute_map = {
            'pid': 'pid',
            'pid_scheme': 'pid_scheme',
            'resolvable_status': 'resolvable_status',
            'resolved_url': 'resolved_url'
        }
        self._pid = pid
        self._pid_scheme = pid_scheme
        self._resolvable_status = resolvable_status
        self._resolved_url = resolved_url

    @classmethod
    def from_dict(cls, dikt) -> 'PersistenceOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Persistence_output of this PersistenceOutput.  # noqa: E501
        :rtype: PersistenceOutput
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pid(self) -> str:
        """Gets the pid of this PersistenceOutput.


        :return: The pid of this PersistenceOutput.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid: str):
        """Sets the pid of this PersistenceOutput.


        :param pid: The pid of this PersistenceOutput.
        :type pid: str
        """

        self._pid = pid

    @property
    def pid_scheme(self) -> str:
        """Gets the pid_scheme of this PersistenceOutput.


        :return: The pid_scheme of this PersistenceOutput.
        :rtype: str
        """
        return self._pid_scheme

    @pid_scheme.setter
    def pid_scheme(self, pid_scheme: str):
        """Sets the pid_scheme of this PersistenceOutput.


        :param pid_scheme: The pid_scheme of this PersistenceOutput.
        :type pid_scheme: str
        """

        self._pid_scheme = pid_scheme

    @property
    def resolvable_status(self) -> bool:
        """Gets the resolvable_status of this PersistenceOutput.


        :return: The resolvable_status of this PersistenceOutput.
        :rtype: bool
        """
        return self._resolvable_status

    @resolvable_status.setter
    def resolvable_status(self, resolvable_status: bool):
        """Sets the resolvable_status of this PersistenceOutput.


        :param resolvable_status: The resolvable_status of this PersistenceOutput.
        :type resolvable_status: bool
        """

        self._resolvable_status = resolvable_status

    @property
    def resolved_url(self) -> str:
        """Gets the resolved_url of this PersistenceOutput.


        :return: The resolved_url of this PersistenceOutput.
        :rtype: str
        """
        return self._resolved_url

    @resolved_url.setter
    def resolved_url(self, resolved_url: str):
        """Sets the resolved_url of this PersistenceOutput.


        :param resolved_url: The resolved_url of this PersistenceOutput.
        :type resolved_url: str
        """

        self._resolved_url = resolved_url
