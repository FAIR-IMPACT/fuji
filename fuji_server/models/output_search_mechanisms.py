"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OutputSearchMechanisms:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"mechanism": "str", "mechanism_info": "list[str]"}

    attribute_map = {"mechanism": "mechanism", "mechanism_info": "mechanism_info"}

    def __init__(self, mechanism=None, mechanism_info=None):
        """OutputSearchMechanisms - a model defined in Swagger"""
        self._mechanism = None
        self._mechanism_info = None
        self.discriminator = None
        if mechanism is not None:
            self.mechanism = mechanism
        if mechanism_info is not None:
            self.mechanism_info = mechanism_info

    @property
    def mechanism(self):
        """Gets the mechanism of this OutputSearchMechanisms.  # noqa: E501


        :return: The mechanism of this OutputSearchMechanisms.  # noqa: E501
        :rtype: str
        """
        return self._mechanism

    @mechanism.setter
    def mechanism(self, mechanism):
        """Sets the mechanism of this OutputSearchMechanisms.


        :param mechanism: The mechanism of this OutputSearchMechanisms.  # noqa: E501
        :type: str
        """
        allowed_values = ["metadata registry", "structured data"]
        if mechanism not in allowed_values:
            raise ValueError(f"Invalid value for `mechanism` ({mechanism}), must be one of {allowed_values}")

        self._mechanism = mechanism

    @property
    def mechanism_info(self):
        """Gets the mechanism_info of this OutputSearchMechanisms.  # noqa: E501


        :return: The mechanism_info of this OutputSearchMechanisms.  # noqa: E501
        :rtype: list[str]
        """
        return self._mechanism_info

    @mechanism_info.setter
    def mechanism_info(self, mechanism_info):
        """Sets the mechanism_info of this OutputSearchMechanisms.


        :param mechanism_info: The mechanism_info of this OutputSearchMechanisms.  # noqa: E501
        :type: list[str]
        """

        self._mechanism_info = mechanism_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(OutputSearchMechanisms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OutputSearchMechanisms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
