"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class FAIRResults:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "test_id": "str",
        "request": "dict(str, object)",
        "resolved_url": "str",
        "start_timestamp": "datetime",
        "end_timestamp": "datetime",
        "expiry_timestamp": "datetime",
        "metric_specification": "str",
        "metric_version": "str",
        "software_version": "str",
        "total_metrics": "int",
        "summary": "dict(str, object)",
        "results": "list[AnyOfFAIRResultsResultsItems]",
    }

    attribute_map = {
        "test_id": "test_id",
        "request": "request",
        "resolved_url": "resolved_url",
        "start_timestamp": "start_timestamp",
        "end_timestamp": "end_timestamp",
        "expiry_timestamp": "expiry_timestamp",
        "metric_specification": "metric_specification",
        "metric_version": "metric_version",
        "software_version": "software_version",
        "total_metrics": "total_metrics",
        "summary": "summary",
        "results": "results",
    }

    def __init__(
        self,
        test_id=None,
        request=None,
        resolved_url=None,
        start_timestamp=None,
        end_timestamp=None,
        expiry_timestamp=None,
        metric_specification=None,
        metric_version=None,
        software_version=None,
        total_metrics=None,
        summary=None,
        results=None,
    ):
        """FAIRResults - a model defined in Swagger"""
        self._test_id = None
        self._request = None
        self._resolved_url = None
        self._start_timestamp = None
        self._end_timestamp = None
        self._expiry_timestamp = None
        self._metric_specification = None
        self._metric_version = None
        self._software_version = None
        self._total_metrics = None
        self._summary = None
        self._results = None
        self.discriminator = None
        if test_id is not None:
            self.test_id = test_id
        if request is not None:
            self.request = request
        if resolved_url is not None:
            self.resolved_url = resolved_url
        if start_timestamp is not None:
            self.start_timestamp = start_timestamp
        if end_timestamp is not None:
            self.end_timestamp = end_timestamp
        if expiry_timestamp is not None:
            self.expiry_timestamp = expiry_timestamp
        if metric_specification is not None:
            self.metric_specification = metric_specification
        if metric_version is not None:
            self.metric_version = metric_version
        if software_version is not None:
            self.software_version = software_version
        if total_metrics is not None:
            self.total_metrics = total_metrics
        if summary is not None:
            self.summary = summary
        if results is not None:
            self.results = results

    @property
    def test_id(self):
        """Gets the test_id of this FAIRResults.  # noqa: E501


        :return: The test_id of this FAIRResults.  # noqa: E501
        :rtype: str
        """
        return self._test_id

    @test_id.setter
    def test_id(self, test_id):
        """Sets the test_id of this FAIRResults.


        :param test_id: The test_id of this FAIRResults.  # noqa: E501
        :type: str
        """

        self._test_id = test_id

    @property
    def request(self):
        """Gets the request of this FAIRResults.  # noqa: E501


        :return: The request of this FAIRResults.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this FAIRResults.


        :param request: The request of this FAIRResults.  # noqa: E501
        :type: dict(str, object)
        """

        self._request = request

    @property
    def resolved_url(self):
        """Gets the resolved_url of this FAIRResults.  # noqa: E501


        :return: The resolved_url of this FAIRResults.  # noqa: E501
        :rtype: str
        """
        return self._resolved_url

    @resolved_url.setter
    def resolved_url(self, resolved_url):
        """Sets the resolved_url of this FAIRResults.


        :param resolved_url: The resolved_url of this FAIRResults.  # noqa: E501
        :type: str
        """

        self._resolved_url = resolved_url

    @property
    def start_timestamp(self):
        """Gets the start_timestamp of this FAIRResults.  # noqa: E501


        :return: The start_timestamp of this FAIRResults.  # noqa: E501
        :rtype: datetime
        """
        return self._start_timestamp

    @start_timestamp.setter
    def start_timestamp(self, start_timestamp):
        """Sets the start_timestamp of this FAIRResults.


        :param start_timestamp: The start_timestamp of this FAIRResults.  # noqa: E501
        :type: datetime
        """

        self._start_timestamp = start_timestamp

    @property
    def end_timestamp(self):
        """Gets the end_timestamp of this FAIRResults.  # noqa: E501


        :return: The end_timestamp of this FAIRResults.  # noqa: E501
        :rtype: datetime
        """
        return self._end_timestamp

    @end_timestamp.setter
    def end_timestamp(self, end_timestamp):
        """Sets the end_timestamp of this FAIRResults.


        :param end_timestamp: The end_timestamp of this FAIRResults.  # noqa: E501
        :type: datetime
        """

        self._end_timestamp = end_timestamp

    @property
    def expiry_timestamp(self):
        """Gets the expiry_timestamp of this FAIRResults.  # noqa: E501


        :return: The expiry_timestamp of this FAIRResults.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_timestamp

    @expiry_timestamp.setter
    def expiry_timestamp(self, expiry_timestamp):
        """Sets the expiry_timestamp of this FAIRResults.


        :param expiry_timestamp: The expiry_timestamp of this FAIRResults.  # noqa: E501
        :type: datetime
        """

        self._expiry_timestamp = expiry_timestamp

    @property
    def metric_specification(self):
        """Gets the metric_specification of this FAIRResults.  # noqa: E501


        :return: The metric_specification of this FAIRResults.  # noqa: E501
        :rtype: str
        """
        return self._metric_specification

    @metric_specification.setter
    def metric_specification(self, metric_specification):
        """Sets the metric_specification of this FAIRResults.


        :param metric_specification: The metric_specification of this FAIRResults.  # noqa: E501
        :type: str
        """

        self._metric_specification = metric_specification

    @property
    def metric_version(self):
        """Gets the metric_version of this FAIRResults.  # noqa: E501


        :return: The metric_version of this FAIRResults.  # noqa: E501
        :rtype: str
        """
        return self._metric_version

    @metric_version.setter
    def metric_version(self, metric_version):
        """Sets the metric_version of this FAIRResults.


        :param metric_version: The metric_version of this FAIRResults.  # noqa: E501
        :type: str
        """

        self._metric_version = metric_version

    @property
    def software_version(self):
        """Gets the software_version of this FAIRResults.  # noqa: E501


        :return: The software_version of this FAIRResults.  # noqa: E501
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this FAIRResults.


        :param software_version: The software_version of this FAIRResults.  # noqa: E501
        :type: str
        """

        self._software_version = software_version

    @property
    def total_metrics(self):
        """Gets the total_metrics of this FAIRResults.  # noqa: E501


        :return: The total_metrics of this FAIRResults.  # noqa: E501
        :rtype: int
        """
        return self._total_metrics

    @total_metrics.setter
    def total_metrics(self, total_metrics):
        """Sets the total_metrics of this FAIRResults.


        :param total_metrics: The total_metrics of this FAIRResults.  # noqa: E501
        :type: int
        """

        self._total_metrics = total_metrics

    @property
    def summary(self):
        """Gets the summary of this FAIRResults.  # noqa: E501


        :return: The summary of this FAIRResults.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this FAIRResults.


        :param summary: The summary of this FAIRResults.  # noqa: E501
        :type: dict(str, object)
        """

        self._summary = summary

    @property
    def results(self):
        """Gets the results of this FAIRResults.  # noqa: E501


        :return: The results of this FAIRResults.  # noqa: E501
        :rtype: list[AnyOfFAIRResultsResultsItems]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this FAIRResults.


        :param results: The results of this FAIRResults.  # noqa: E501
        :type: list[AnyOfFAIRResultsResultsItems]
        """

        self._results = results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(FAIRResults, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FAIRResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
