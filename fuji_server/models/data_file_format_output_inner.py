"""
    F-UJI

    A Service for Evaluating Research Data Objects Based on <a href ='https://doi.org/10.5281/zenodo.3775793'>FAIRsFAIR Metrics</a>. <p> This work was supported by the <a href='https://www.fairsfair.eu/'>FAIRsFAIR</a> project (H2020-INFRAEOSC-2018-2020 Grant Agreement 831558).  # noqa: E501

    OpenAPI spec version: 3.0.1
    Contact: anusuriya.devaraju@googlemail.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DataFileFormatOutputInner:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "file_uri": "str",
        "mime_type": "str",
        "is_preferred_format": "bool",
        "preference_reason": "list[str]",
        "subject_areas": "list[str]",
    }

    attribute_map = {
        "file_uri": "file_uri",
        "mime_type": "mime_type",
        "is_preferred_format": "is_preferred_format",
        "preference_reason": "preference_reason",
        "subject_areas": "subject_areas",
    }

    def __init__(
        self, file_uri=None, mime_type=None, is_preferred_format=False, preference_reason=None, subject_areas=None
    ):
        """DataFileFormatOutputInner - a model defined in Swagger"""
        self._file_uri = None
        self._mime_type = None
        self._is_preferred_format = None
        self._preference_reason = None
        self._subject_areas = None
        self.discriminator = None
        if file_uri is not None:
            self.file_uri = file_uri
        if mime_type is not None:
            self.mime_type = mime_type
        if is_preferred_format is not None:
            self.is_preferred_format = is_preferred_format
        if preference_reason is not None:
            self.preference_reason = preference_reason
        if subject_areas is not None:
            self.subject_areas = subject_areas

    @property
    def file_uri(self):
        """Gets the file_uri of this DataFileFormatOutputInner.  # noqa: E501


        :return: The file_uri of this DataFileFormatOutputInner.  # noqa: E501
        :rtype: str
        """
        return self._file_uri

    @file_uri.setter
    def file_uri(self, file_uri):
        """Sets the file_uri of this DataFileFormatOutputInner.


        :param file_uri: The file_uri of this DataFileFormatOutputInner.  # noqa: E501
        :type: str
        """

        self._file_uri = file_uri

    @property
    def mime_type(self):
        """Gets the mime_type of this DataFileFormatOutputInner.  # noqa: E501


        :return: The mime_type of this DataFileFormatOutputInner.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this DataFileFormatOutputInner.


        :param mime_type: The mime_type of this DataFileFormatOutputInner.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def is_preferred_format(self):
        """Gets the is_preferred_format of this DataFileFormatOutputInner.  # noqa: E501


        :return: The is_preferred_format of this DataFileFormatOutputInner.  # noqa: E501
        :rtype: bool
        """
        return self._is_preferred_format

    @is_preferred_format.setter
    def is_preferred_format(self, is_preferred_format):
        """Sets the is_preferred_format of this DataFileFormatOutputInner.


        :param is_preferred_format: The is_preferred_format of this DataFileFormatOutputInner.  # noqa: E501
        :type: bool
        """

        self._is_preferred_format = is_preferred_format

    @property
    def preference_reason(self):
        """Gets the preference_reason of this DataFileFormatOutputInner.  # noqa: E501


        :return: The preference_reason of this DataFileFormatOutputInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._preference_reason

    @preference_reason.setter
    def preference_reason(self, preference_reason):
        """Sets the preference_reason of this DataFileFormatOutputInner.


        :param preference_reason: The preference_reason of this DataFileFormatOutputInner.  # noqa: E501
        :type: list[str]
        """

        self._preference_reason = preference_reason

    @property
    def subject_areas(self):
        """Gets the subject_areas of this DataFileFormatOutputInner.  # noqa: E501


        :return: The subject_areas of this DataFileFormatOutputInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_areas

    @subject_areas.setter
    def subject_areas(self, subject_areas):
        """Sets the subject_areas of this DataFileFormatOutputInner.


        :param subject_areas: The subject_areas of this DataFileFormatOutputInner.  # noqa: E501
        :type: list[str]
        """

        self._subject_areas = subject_areas

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DataFileFormatOutputInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFileFormatOutputInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
